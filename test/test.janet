(import json)
(import ../nested-text)

(def test-base-dir "./test/nestedtext_tests/test_cases")

(def skip {"string_multiline_12" true})

(each t (sort (os/dir test-base-dir))
  (unless (skip t)
    (print t)
    (def td (string test-base-dir "/" t))
    (def load-in (string td "/load_in.nt"))
    (def load-out (string td "/load_out.json"))
    (def dump-in (string td "/dump_in.json"))
    (def dump-out (string td "/dump_out.nt"))
    (when (and (os/stat load-in)
               (os/stat load-out))
      (print "load test...")
      (def in (freeze (nested-text/decode (slurp load-in))))
      (def json (json/decode (slurp load-out)))
      (def out (freeze [:ok (if (= json :null) nil json)]))
      (unless (= in out)
        (errorf "%p\n!=\n%p" in out)))
    (when (and (os/stat dump-in)
               (os/stat dump-out))
      (print "dump test...")
      (def json (json/decode (slurp dump-in)))
      (def json (if (= json :null) nil json))
      (def dumped-bytes (string (nested-text/encode json)))
      (def dumped (freeze (nested-text/decode dumped-bytes)))
      (def nt (freeze (nested-text/decode (slurp dump-out))))
      (unless (= dumped nt)
        (errorf "%p\n!=\n%p\n======\n%s"
                nt dumped dumped-bytes)))))
